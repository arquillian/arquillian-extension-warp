<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jboss.arquillian.extension</groupId>
    <artifactId>arquillian-warp-ftest-base</artifactId>
    <version>2.1.0.Final-SNAPSHOT</version>
    <relativePath>../../build/ftest-base</relativePath>
  </parent>

  <artifactId>arquillian-warp-jsf-ftest</artifactId>
  <name>Arquillian Warp: JSF Functional Tests</name>

  <properties>
    <browser>htmlUnit</browser>
    <remoteReusable>false</remoteReusable>

    <!-- Do NOT deploy any of the ITs modules -->
    <maven.deploy.skip>true</maven.deploy.skip>
    <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
  </properties>

  <dependencies>

    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <!--The dependency on the servlet api must be declared for each profile contained "ftest-base/pom.xml" instead of using "org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec",
        as the test "org.jboss.arquillian.warp.jsf.ftest.lifecycle.TestFacesLifecycleFailurePropagation" would fail for TomEE (see detailed explanation in this test)
      -->
    <dependency>
      <groupId>jakarta.faces</groupId>
      <artifactId>jakarta.faces-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.el</groupId>
      <artifactId>jakarta.el-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-warp-jsf</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.arquillian.junit5</groupId>
      <artifactId>arquillian-junit5-container</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.arquillian.protocol</groupId>
      <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-drone-webdriver-depchain</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
    <!--Force newer HtmlUnit version (JakartaEE11 error: "TypeError: redeclaration of const url" is fixed in newer versions.
        It is broken in 4.19.1, works with 4.23.0 and newer.
        See https://github.com/arquillian/arquillian-extension-warp/issues/251-->
    <dependency>
     <groupId>org.seleniumhq.selenium</groupId>
       <artifactId>htmlunit3-driver</artifactId>
	   <version>4.36.0</version>
      <type>pom</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-jacoco</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-warp-build-resources</artifactId>
    </dependency>
    
    <!--Required after updating to Drone 3.0.0.Alpha7
        Fixed this error at test execution:
          
        [ERROR] org.jboss.arquillian.warp.jsf.ftest.BasicJsfTest  Time elapsed: 0.55 s  <<< ERROR! java.lang.NoClassDefFoundError: org/jboss/shrinkwrap/resolver/api/maven/Maven at org.arquillian.warp.ftest.installation.ContainerInstaller.unpackContainerDistribution(ContainerInstaller.java:73) -->
    <dependency>
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-depchain</artifactId>
      <type>pom</type>
      <scope>test</scope>
    </dependency>

    <!--LittleProxy logging: LittleProxy uses SL4J. Log4j2 is used as the actual log writer: -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <!--This binds to SLF4J 1.7.29 - same that is used up to LittleProxy 2.0.7.
          More recent LittleProxy versions use "log4j-slf4j2-impl", but several other dependencies still provide the 1.x version, and
          thus we would have to add a dependency "org.slf4:slf4j-api:2.0.7" to overwrite the other version. It is easier to stay with 1.x-->
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <configuration>
          <licenseSets>
            <licenseSet>
              <excludes>
                <exclude>**/*.properties</exclude>
              </excludes>
            </licenseSet>
          </licenseSets>
        </configuration>
      </plugin>
      <!--Create Jacoco report (mainly required for report aggregation). This uses the default configuration from "build/pom.xml".
          The report in this project is also a "proof of concept" that a web project using "arquillian-extension-warp" can create
          a Jacoco report for invocation of the server side of its classes. -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <!--Jacoco related configuration inherited from "build/pom.xml"-->
      </plugin>
    </plugins>
  </build>

</project>

